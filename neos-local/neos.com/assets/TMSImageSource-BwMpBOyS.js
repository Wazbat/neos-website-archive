import{T as h}from"./TiledImageSource-Dter0Emb.js";import{M as s}from"./three.module-CQU0seT4.js";class P{get isMercator(){return this.scheme==="EPSG:3857"}constructor(t="EPSG:4326"){this.scheme=t,this.tileCountX=1,this.tileCountY=1,this.setScheme(t)}setScheme(t){switch(this.scheme=t,t){case"EPSG:4326":this.tileCountX=2,this.tileCountY=1;break;case"EPSG:3857":this.tileCountX=1,this.tileCountY=1;break;default:throw new Error}}convertProjectionToLatitude(t){if(this.isMercator){const e=s.mapLinear(t,0,1,-1,1);return 2*Math.atan(Math.exp(e*Math.PI))-Math.PI/2}else return s.mapLinear(t,0,1,-Math.PI/2,Math.PI/2)}convertProjectionToLongitude(t){return s.mapLinear(t,0,1,-Math.PI,Math.PI)}convertLatitudeToProjection(t){if(this.isMercator){const e=Math.log(Math.tan(Math.PI/4+t/2));return 1/2+1*e/(2*Math.PI)}else return s.mapLinear(t,-Math.PI/2,Math.PI/2,0,1)}convertLongitudeToProjection(t){return(t+Math.PI)/(2*Math.PI)}getLongitudeDerivativeAtProjection(t){return 2*Math.PI}getLatitudeDerivativeAtProjection(t){let i=t-1e-5;return i<0&&(i=t+1e-5),this.isMercator?Math.abs(this.convertProjectionToLatitude(t)-this.convertProjectionToLatitude(i))/1e-5:Math.PI}getBounds(){return[this.convertProjectionToLongitude(0),this.convertProjectionToLatitude(0),this.convertProjectionToLongitude(1),this.convertProjectionToLatitude(1)]}}class A extends h{constructor(t={}){super();const{levels:e=20,tileDimension:i=256,projection:o="EPSG:3857",url:r=null}=t;this.tileDimension=i,this.levels=e,this.projection=o,this.url=r}getUrl(t,e,i){return this.url.replace(/{\s*z\s*}/gi,i).replace(/{\s*x\s*}/gi,t).replace(/{\s*(y|reverseY|-\s*y)\s*}/gi,e)}init(){const{tiling:t,tileDimension:e,levels:i,projection:o,url:r}=this;return t.flipY=!/{\s*reverseY|-\s*y\s*}/g.test(r),t.setProjection(new P(o)),t.setContentBounds(...t.projection.getBounds()),t.generateLevels(i,t.projection.tileCountX,t.projection.tileCountY,{tilePixelWidth:e,tilePixelHeight:e}),this.url=r,Promise.resolve()}}class T extends h{constructor(t={}){const{url:e=null}=t;super(),this.tileSets=null,this.extension=null,this.url=e}getUrl(t,e,i){const{url:o,extension:r,tileSets:l,tiling:c}=this;return new URL(`${parseInt(l[i-c.minLevel].href)}/${t}/${e}.${r}`,o).toString()}init(){const{url:t}=this;return this.fetchData(new URL("tilemapresource.xml",t),this.fetchOptions).then(e=>e.text()).then(e=>{const{tiling:i}=this,o=new DOMParser().parseFromString(e,"text/xml"),r=o.querySelector("BoundingBox"),l=o.querySelector("TileFormat"),u=[...o.querySelector("TileSets").querySelectorAll("TileSet")].map(n=>({href:parseInt(n.getAttribute("href")),unitsPerPixel:parseFloat(n.getAttribute("units-per-pixel")),order:parseInt(n.getAttribute("order"))})).sort((n,I)=>n.order-I.order),g=parseFloat(r.getAttribute("minx"))*s.DEG2RAD,p=parseFloat(r.getAttribute("maxx"))*s.DEG2RAD,m=parseFloat(r.getAttribute("miny"))*s.DEG2RAD,S=parseFloat(r.getAttribute("maxy"))*s.DEG2RAD,x=parseInt(l.getAttribute("width")),d=parseInt(l.getAttribute("height")),M=l.getAttribute("extension"),j=o.querySelector("SRS").textContent;this.extension=M,this.url=t,this.tileSets=u,i.setProjection(new P(j)),i.setContentBounds(g,m,p,S),u.forEach(({order:n})=>{i.setLevel(n,{tileCountX:i.projection.tileCountX*2**n,tilePixelWidth:x,tilePixelHeight:d})})})}}export{P,T,A as X};
//# sourceMappingURL=TMSImageSource-BwMpBOyS.js.map
