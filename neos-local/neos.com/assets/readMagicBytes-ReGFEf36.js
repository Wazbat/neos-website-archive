class A{constructor(){this.fetchOptions={},this.workingPath=""}load(...t){return console.warn('Loader: "load" function has been deprecated in favor of "loadAsync".'),this.loadAsync(...t)}loadAsync(t){return fetch(t,this.fetchOptions).then(e=>{if(!e.ok)throw new Error(`Failed to load file "${t}" with status ${e.status} : ${e.statusText}`);return e.arrayBuffer()}).then(e=>(this.workingPath===""&&(this.workingPath=this.workingPathForURL(t)),this.parse(e)))}resolveExternalURL(t){return/^[^\\/]/.test(t)&&!/^http/.test(t)?this.workingPath+"/"+t:t}workingPathForURL(t){const e=t.split(/[\\/]/g);return e.pop(),e.join("/")+"/"}parse(t){throw new Error("LoaderBase: Parse not implemented.")}}const b=new TextDecoder;function w(o){return b.decode(o)}function f(o,t,e,s,a,r){let n;switch(s){case"SCALAR":n=1;break;case"VEC2":n=2;break;case"VEC3":n=3;break;case"VEC4":n=4;break;default:throw new Error(`FeatureTable : Feature type not provided for "${r}".`)}let c;const i=e*n;switch(a){case"BYTE":c=new Int8Array(o,t,i);break;case"UNSIGNED_BYTE":c=new Uint8Array(o,t,i);break;case"SHORT":c=new Int16Array(o,t,i);break;case"UNSIGNED_SHORT":c=new Uint16Array(o,t,i);break;case"INT":c=new Int32Array(o,t,i);break;case"UNSIGNED_INT":c=new Uint32Array(o,t,i);break;case"FLOAT":c=new Float32Array(o,t,i);break;case"DOUBLE":c=new Float64Array(o,t,i);break;default:throw new Error(`FeatureTable : Feature component type not provided for "${r}".`)}return c}class g{constructor(t,e,s,a){this.buffer=t,this.binOffset=e+s,this.binLength=a;let r=null;if(s!==0){const n=new Uint8Array(t,e,s);r=JSON.parse(w(n))}else r={};this.header=r}getKeys(){return Object.keys(this.header)}getData(t,e,s=null,a=null){const r=this.header;if(!(t in r))return null;const n=r[t];if(n instanceof Object){if(Array.isArray(n))return n;{const{buffer:c,binOffset:i,binLength:h}=this,l=n.byteOffset||0,p=n.type||a,y=n.componentType||s;if("type"in n&&a&&n.type!==a)throw new Error("FeatureTable: Specified type does not match expected type.");const u=i+l,d=f(c,u,e,p,y,t);if(u+d.byteLength>i+h)throw new Error("FeatureTable: Feature data read outside binary body length.");return d}}else return n}getBuffer(t,e){const{buffer:s,binOffset:a}=this;return s.slice(a+t,a+t+e)}}class I{constructor(t){this.batchTable=t;const e=t.header.extensions["3DTILES_batch_table_hierarchy"];this.classes=e.classes;for(const a of this.classes){const r=a.instances;for(const n in r)a.instances[n]=this._parseProperty(r[n],a.length,n)}if(this.instancesLength=e.instancesLength,this.classIds=this._parseProperty(e.classIds,this.instancesLength,"classIds"),e.parentCounts?this.parentCounts=this._parseProperty(e.parentCounts,this.instancesLength,"parentCounts"):this.parentCounts=new Array(this.instancesLength).fill(1),e.parentIds){const a=this.parentCounts.reduce((r,n)=>r+n,0);this.parentIds=this._parseProperty(e.parentIds,a,"parentIds")}else this.parentIds=null;this.instancesIds=[];const s={};for(const a of this.classIds)s[a]=s[a]??0,this.instancesIds.push(s[a]),s[a]++}_parseProperty(t,e,s){if(Array.isArray(t))return t;{const{buffer:a,binOffset:r}=this.batchTable,n=t.byteOffset,c=t.componentType||"UNSIGNED_SHORT",i=r+n;return f(a,i,e,"SCALAR",c,s)}}getDataFromId(t,e={}){const s=this.parentCounts[t];if(this.parentIds&&s>0){let i=0;for(let h=0;h<t;h++)i+=this.parentCounts[h];for(let h=0;h<s;h++){const l=this.parentIds[i+h];l!==t&&this.getDataFromId(l,e)}}const a=this.classIds[t],r=this.classes[a].instances,n=this.classes[a].name,c=this.instancesIds[t];for(const i in r)e[n]=e[n]||{},e[n][i]=r[i][c];return e}}class E extends g{get batchSize(){return console.warn("BatchTable.batchSize has been deprecated and replaced with BatchTable.count."),this.count}constructor(t,e,s,a,r){super(t,s,a,r),this.count=e,this.extensions={};const n=this.header.extensions;n&&n["3DTILES_batch_table_hierarchy"]&&(this.extensions["3DTILES_batch_table_hierarchy"]=new I(this))}getData(t,e=null,s=null){return console.warn("BatchTable: BatchTable.getData is deprecated. Use BatchTable.getDataFromId to get allproperties for an id or BatchTable.getPropertyArray for getting an array of value for a property."),super.getData(t,this.count,e,s)}getDataFromId(t,e={}){if(t<0||t>=this.count)throw new Error(`BatchTable: id value "${t}" out of bounds for "${this.count}" features number.`);for(const s of this.getKeys())s!=="extensions"&&(e[s]=super.getData(s,this.count)[t]);for(const s in this.extensions){const a=this.extensions[s];a.getDataFromId instanceof Function&&(e[s]=e[s]||{},a.getDataFromId(t,e[s]))}return e}getPropertyArray(t){return super.getData(t,this.count)}}function L(o){if(o===null||o.byteLength<4)return"";let t;if(o instanceof DataView?t=o:t=new DataView(o),String.fromCharCode(t.getUint8(0))==="{")return null;let e="";for(let s=0;s<4;s++)e+=String.fromCharCode(t.getUint8(s));return e}export{E as B,g as F,A as L,w as a,L as r};
//# sourceMappingURL=readMagicBytes-ReGFEf36.js.map
